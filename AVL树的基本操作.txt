#include <iostream>
using namespace std;

template<class K,class V>
struct Node
{
	Node(const K& key,const V& value)
		:_pLeft(NULL)
		,_pRight(NULL)
		,_parent(NULL)
		,_key(key)
		,_value(value)
		,_bf(0)
	{}



	Node<K,V>* _pLeft;
	Node<K,V>* _pRight;
	Node<K,V>* _parent;
	K _key;
	V _value;
	int _bf;
};



template<class K,class V>
class AVLTree
{
	typedef Node<K,V> Node;
public:
	AVLTree()
		:_pRoot(NULL)
	{}


	bool IsAVLTree()
	{
		return _IsAVLTree(_pRoot);
	}

	bool Insert(const K& key,const V& value)
	{ 
		if(_pRoot==NULL)
		{
			_pRoot=new Node(key,value);
			return true;
		}

		Node* pcur=_pRoot;
		Node* parent=NULL;
		while(pcur)
		{
			if(key<pcur->_key)
			{
				parent=pcur;
				pcur=pcur->_pLeft;
			}
			else if(key>pcur->_key)
			{
				parent=pcur;
				pcur=pcur->_pRight;
			}
			else
				return false;
		}

		pcur=new Node(key,value);
		if(key<parent->_key)
		{
			parent->_pLeft=pcur;
		}
		else
		{
			parent->_pRight=pcur;
		}
		pcur->_parent=parent;

		while(pcur->_parent!=NULL)
		{
			if(parent->_pLeft==pcur)
				parent->_bf--;
			else
				parent->_bf++;

			if(parent->_bf==0)      //若双亲平衡因子为0，则说明在插入这个结点之后，并不会对其所在子树高度产生影响，不会影响平衡
				return true;

			else if(abs(parent->_bf)==2)  //若双亲的平衡因子为2或-2，则在此处不满足AVL树的条件，需要进行旋转调整
			{                             //注意：由于调整之后，子树的高度与插入之前相等，由此在这里不需要向上调整，
				                          //已经平衡（插入之前这棵树必然满足AVL树的条件），可以直接跳出
				if(parent->_bf==2&&pcur->_bf==1)	//左单旋
					RotateL(parent);
				else if(parent->_bf==-2&&pcur->_bf==-1)    //右单旋
					RotateR(parent);
				else if(parent->_bf==-2&&pcur->_bf==1)    //先左旋后右旋
				{
					RotateLR(parent);
				}
				else    //先右旋后左旋
				{
					RotateRL(parent);
				}

				break;
			}
			else   //若双亲平衡因子为1或-1，则说明在插入该结点之后，对其所在子树高度产生了影响，但在此处依旧满足AVL树条件，所以需要继续向上调整
			{
				pcur=parent;
				parent=pcur->_parent;
			}
		}

		return true;
	}


	bool Delete(const K& key)
	{
		if(_pRoot==NULL)
			return false;

		Node* pcur=_pRoot;
		Node* parent=NULL;
		while(pcur)
		{
			if(key<pcur->_key)
			{
				parent=pcur;
				pcur=pcur->_pLeft;
			}
			else if(key>pcur->_key)
			{
				parent=pcur;
				pcur=pcur->_pRight;
			}
			else
			{
				if(pcur->_pLeft==NULL)
				{
					if(parent==NULL)
					{
						_pRoot=pcur->_pRight;
					}
					else if(pcur==parent->_pLeft)
					{
						parent->_pLeft=pcur->_pRight;
					}
					else
					{
						parent->_pRight=pcur->_pRight;
					}

					if(pcur->_pRight)
						pcur->_pRight->_parent=parent;
				}
				else if(pcur->_pRight==NULL)
				{
					if(parent==NULL)
						_pRoot=pcur->_pLeft;
					else if(pcur==parent->_pLeft)
						parent->_pLeft=pcur->_pLeft;
					else
						parent->_pRight=pcur->_pLeft;

					if(pcur->_pLeft)
						pcur->_pLeft->_parent=parent;
				}
				else
				{
					Node* pDel=pcur->_pRight;
					parent=pcur;
					while(pDel->_pLeft)
					{
						parent=pDel;
						pDel=pDel->_pLeft;
					}
					pcur->_key=pDel->_key;
					pcur->_value=pDel->_value;

					if(pDel==parent->_pLeft)
						parent->_pLeft=pDel->_pRight;
					else
						parent->_pRight=pDel->_pRight;

					if(pDel->_pRight)
						pDel->_pRight->_parent=parent;

					pcur=pDel;
				}

				Node* pNode=pcur;
				while(parent)  //从被删除结点的双亲开始向上更新平衡因子
				{
					if(pNode->_key<parent->_key)
						parent->_bf++;
					else
						parent->_bf--;

					if(parent->_bf==1||parent->_bf==-1) //若双亲平衡因子为1或-1，则说明删除的结点对其所在子树的高度并没有影响，因此这里依旧满足AVL树的条件
						break;
					else if(parent->_bf==0)  //若双亲平衡因子为0，则说明对其所在子树高度产生影响，但在此处依旧满足AVL树条件，所以得向上继续更新
					{
						pNode=parent;
						parent=parent->_parent;
					}
					else  //若双亲平衡因子为2或-2，则在此处不满足AVL树的条件，需要进行一定的旋转调整
					{     //注意：此处在进行过调整之后，所在子树的高度必然-1，由此并不能保证是否向上还需要调整，由此这里千万不能像插入算法一样直接跳出
						Node* pParent=parent->_parent;
						if(parent->_bf==-2)
						{
							if(parent->_pLeft->_bf==-1)  //
							{
								pNode=parent->_pLeft;
								RotateR(parent);
							}
							else
							{
								pNode=parent->_pLeft->_pRight;
								RotateLR(parent);
							}
						}
						else
						{
							if(parent->_pRight->_bf==1)
							{
								pNode=parent->_pRight;
								RotateL(parent);
							}
							else
							{
								pNode=parent->_pRight->_pLeft;
								RotateRL(parent);
							}
						}
						parent=pParent;
					}
				}

				delete pcur;
				return true;
			}
		}

		return false;
	}

	void Inorder()
	{
		_Inorder(_pRoot);
		cout<<endl;
	}

private:
	void RotateL(Node* parent)    //左旋
	{
		Node* pSubR=parent->_pRight;
		Node* pSubRL=pSubR->_pLeft;
		Node* pparent=parent->_parent;

		pSubR->_pLeft=parent;
		parent->_parent=pSubR;

		parent->_pRight=pSubRL;
		if(pSubRL)
			pSubRL->_parent=parent;

		pSubR->_parent=pparent;
		if(pparent==NULL)
			_pRoot=pSubR;
		else
		{
			if(pparent->_pLeft==parent)
				pparent->_pLeft=pSubR;
			else
				pparent->_pRight=pSubR;
		}
			
		pSubR->_bf=parent->_bf=0;
	}

	void RotateR(Node* parent)    //右旋
	{
		Node* pSubL=parent->_pLeft;
		Node* pSubLR=pSubL->_pRight;
		Node* pparent=parent->_parent;

		pSubL->_pRight=parent;
		parent->_parent=pSubL;

		parent->_pLeft=pSubLR;
		if(pSubLR)
			pSubLR->_parent=parent;

		pSubL->_parent=pparent;
		if(pparent==NULL)
			_pRoot=pSubL;
		else
		{
			if(pparent->_pLeft==parent)
				pparent->_pLeft=pSubL;
			else
				pparent->_pRight=pSubL;
		}

		parent->_bf=pSubL->_bf=0;
	}


	void RotateRL(Node* parent)
	{
		Node* pParent=parent;
		Node* pSubR=parent->_pRight;
		int bf=parent->_pRight->_pLeft->_bf;
		RotateR(parent->_pRight);
		RotateL(parent);

		if(parent->_pLeft)
		{
			if(bf==-1)
				pSubR->_bf=1;
			else
				pParent->_bf=-1;
		}
	}


	void RotateLR(Node* parent)
	{
		Node* pParent=parent;
		Node* pSubL=parent->_pLeft;
		int bf=parent->_pLeft->_pRight->_bf;
		
		RotateL(parent->_pLeft);
		RotateR(parent);
		
		if(parent->_pRight)
		{
			if(bf==1)
				pSubL->_bf=-1;
			else
				pParent->_bf=1;
		}	
	}

	bool _IsAVLTree(Node* pRoot)
	{
		if(pRoot==NULL)
			return true;

		if(pRoot->_bf!=Height(pRoot->_pRight)-Height(pRoot->_pLeft)||abs(pRoot->_bf)==2)
		{
			cout<<pRoot->_key<<": "<<pRoot->_bf<<endl;
			return false;
		}

		return _IsAVLTree(pRoot->_pLeft)&&_IsAVLTree(pRoot->_pRight);
	}


	int Height(Node* pRoot)
	{
		if(pRoot==NULL)
			return 0;

		int left=Height(pRoot->_pLeft)+1;
		int right=Height(pRoot->_pRight)+1;

		return left>right?left:right;
	}


	void _Inorder(Node* pRoot)
	{
		if(pRoot==NULL)
			return ;

		_Inorder(pRoot->_pLeft);
		cout<<pRoot->_key<<" ";
		_Inorder(pRoot->_pRight);
	}
private:
	Node* _pRoot;
};