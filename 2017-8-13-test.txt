//归并排序---递归（自顶向下）
//void Merge(int arr[],int left,int right,int mid,int* tmp)
//{
//	int i=left;
//	int j=mid+1;
//	int idx=0;
//	while(i<=mid&&j<=right)
//	{
//		if(arr[i]<arr[j])
//			tmp[idx++]=arr[i++];
//		else
//			tmp[idx++]=arr[j++];
//	}
//
//	while(i<=mid)
//	{
//		tmp[idx++]=arr[i++];
//	}
//	while(j<=right)
//	{
//		tmp[idx++]=arr[j++];
//	}
//
//}
//
//
//void MergeSort_Nor(int arr[],int left,int right,int* tmp)
//{
//	if(left<right)
//	{
//		int mid=(left&right)+((left^right)>>1);
//		MergeSort_Nor(arr,left,mid,tmp);
//		MergeSort_Nor(arr,mid+1,right,tmp);
//		Merge(arr,left,right,mid,tmp);
//		memcpy(arr+left,tmp,(right-left+1)*sizeof(arr[0]));
//	}
//}
//
//
//void MergeSort(int arr[],int size)
//{
//	int* tmp=new int[size];
//	int left=0;
//	int right=size-1;
//	MergeSort_Nor(arr,left,right,tmp);
//	delete[] tmp;
//}


//归并排序---非递归（自底向上）
//void Merge(int arr[],int left,int right,int mid,int* tmp)
//{
//	int i=left;
//	int j=mid+1;
//	int idx=0;
//	while(i<=mid&&j<=right)
//	{
//		if(arr[i]<arr[j])
//			tmp[idx++]=arr[i++];
//		else
//			tmp[idx++]=arr[j++];
//	}
//
//	while(i<=mid)
//	{
//		tmp[idx++]=arr[i++];
//	}
//	while(j<=right)
//	{
//		tmp[idx++]=arr[j++];
//	}
//
//}
//
//void MergeSort(int arr[],int size)
//{
//	int* tmp=new int[size];
//	int gap=1;
//	while(gap<size)
//	{
//		for(int i=0;i<size;i+=2*gap)
//		{
//			int left=i;
//			int right=i+2*gap-1;
//			int mid=i+gap-1;
//			if(right>=size)
//				right=size-1;
//			if(mid>=size)
//				mid=size-1;
//			Merge(arr,left,right,mid,tmp);
//			memcpy(arr+left,tmp,(right-left+1)*sizeof(arr[0]));
//		}
//		gap*=2;
//	}
//
//	delete[] tmp;
//}
//
//void funtest()
//{
//	int arr[]={9,1,5,3,4,2,6,8,7,0};
//	MergeSort(arr,sizeof(arr)/sizeof(arr[0]));
//	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
//	{
//		cout<<arr[i]<<" ";
//	}
//
//	cout<<endl;
//}
//
//int main()
//{
//	funtest();
//	return 0;
//}



//计数排序
void CountSort(int arr[],int size)
{
	int i=0;
	int max=arr[0];
	int min=arr[0];
	for(i=1;i<size;i++)
	{
		if(arr[i]>max)
			max=arr[i];
		if(arr[i]<min)
			min=arr[i];
	}

	int len=max-min+1;
	int* count=new int[len];
	memset(count,0,len*sizeof(arr[0]));

	for(i=0;i<size;i++)
	{
		count[arr[i]-min]++;
	}

	for(i=1;i<len;i++)
	{
		count[i]=count[i]+count[i-1];
	}

	int* tmp=new int[size];
	for(i=size-1;i>=0;i--)
	{
		tmp[count[arr[i]]-1]=arr[i];
		count[arr[i]]--;
	}

	memcpy(arr,tmp,size*sizeof(arr[0]));
}

void funtest()
{
	int arr[]={2,2,8,8,8,1,0,5,6,6,6};
	CountSort(arr,sizeof(arr)/sizeof(arr[0]));
	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
	{
		cout<<arr[i]<<" ";
	}

	cout<<endl;
}

int main()
{
	funtest();
	return 0;
}