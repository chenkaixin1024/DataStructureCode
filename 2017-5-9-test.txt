#include <iostream>
using namespace std;
#include <vector>

template<class T>
class Heap
{
public:
	Heap(T arr[],size_t size)
	{
		v.resize(size);
		for(size_t i=0;i<size;i++)
		{
			v[i]=arr[i];
		}
		int root=(size-1)>>1;
		for(;root>=0;root--)
		{
			_Adjustdown(root);
		}
	}

	void Insert(const T& data)
	{
		v.push_back(data);
		_Adjustup();
	}

	void DeleteTop()
	{
		int size=v.size();
		swap(v[0],v[size-1]);
		v.pop_back();
		_Adjustdown(0);
	}

	size_t size()const
	{
		return v.size();
	}

	bool empty()const
	{
		return v.empty();
	}

private:
	void _Adjustdown(int parent)
	{
		int child=parent*2+1;
		int size=v.size();
		while(child<size)
		{
			if(child+1<size)
			{
				if(v[child]>v[child+1])
					child+=1;
			}
			if(v[parent]>v[child])
				swap(v[parent],v[child]);
			parent=child;
			child=parent*2+1;
		}
	}

	void _Adjustup()
	{
		int size=v.size();
		int child=size-1;
		int parent=(child-1)>>1;
		while(parent>=0)
		{
			if(v[child]>v[parent])
				return ;
			swap(v[child],v[parent]);
			child=parent;
			parent=(child-1)>>1;
		}
	}
private:
	vector<T> v;
};